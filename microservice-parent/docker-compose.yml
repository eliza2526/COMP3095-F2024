#----------------------------------------------------------------
# 1. docker-compose -p microservices-comp3095-ecommerce -f docker.yml up -d
#
#
#
#-------------------------------------------------------------------
version: '3.9'

services:

  inventory-service:
    image: inventory-service
    ports:
      - "8083:8083"
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    container_name: inventory-service
    environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5434/inventory-service
        SPRING_DATASOURCE_USERNAME: admin
        SPRING_DATASOURCE_PASSWORD: password
        SPRING_JPA_HIBERNATE_DDL_AUTO: none
        SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  order-service:
    image: order-service
    ports:
      - "8085:8085"
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    container_name: order-service
    environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5433/order-service
        SPRING_DATASOURCE_USERNAME: admin
        SPRING_DATASOURCE_PASSWORD: password
        SPRING_JPA_HIBERNATE_DDL_AUTO: none
        SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8082:8082"
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  postgres-inventory:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    #  - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/postgres/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-order:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-multiple
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    container_name: mongodb
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    depends_on:
      - mongodb
    networks:
      - spring

  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring


  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge